<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <!-- Дизайн-система: базовые значения -->

    <!-- Размеры и отступы -->
    <sys:Double x:Key="StandardElementHeight">24</sys:Double>
    <sys:Double x:Key="LargeElementHeight">32</sys:Double>
    <sys:Double x:Key="StandardButtonMinWidth">80</sys:Double>
    <sys:Double x:Key="StandardFontSize">11</sys:Double>
    <sys:Double x:Key="SmallFontSize">10</sys:Double>
    <sys:Double x:Key="LargeFontSize">12</sys:Double>
    <sys:Double x:Key="StandardPadding">10</sys:Double>
    <sys:Double x:Key="SmallPadding">5</sys:Double>
    <sys:Double x:Key="LargePadding">15</sys:Double>
    <sys:Double x:Key="StandardMargin">10</sys:Double>
    <sys:Double x:Key="SmallMargin">5</sys:Double>
    <sys:Double x:Key="TinyMargin">2</sys:Double>
    <sys:Double x:Key="StandardBorderThickness">1</sys:Double>

    <!-- Стандартные отступы для элементов -->
    <Thickness x:Key="StandardMarginThickness">6</Thickness>
    <Thickness x:Key="SmallMarginThickness">5</Thickness>
    <Thickness x:Key="TinyMarginThickness">2</Thickness>
    <Thickness x:Key="StandardPaddingThickness">10,5</Thickness>
    <Thickness x:Key="SmallPaddingThickness">5,2</Thickness>
    <Thickness x:Key="ButtonPaddingThickness">12,6</Thickness>
    <Thickness x:Key="ControlPaddingThickness">6,4</Thickness>
    <Thickness x:Key="TextBoxPaddingThickness">2,0,2,0</Thickness>
    <Thickness x:Key="StandardBorderThicknessValue">1</Thickness>

    <!-- Направленные и комбинированные отступы (часто употребимые) -->
    <Thickness x:Key="RightSmallMarginThickness">0,0,5,0</Thickness>
    <Thickness x:Key="LeftSmallMarginThickness">5,0,0,0</Thickness>
    <Thickness x:Key="BottomSmallMarginThickness">0,0,0,5</Thickness>
    <Thickness x:Key="BottomLargeMarginThickness">0,0,0,15</Thickness>
    <Thickness x:Key="HorizontalSmallMarginThickness">5,0</Thickness>
    <Thickness x:Key="VerticalSmallMarginThickness">0,5</Thickness>
    <Thickness x:Key="VerticalTinyMarginThickness">0,2</Thickness>
    <Thickness x:Key="SectionContentMarginThickness">10,5,10,5</Thickness>
    <Thickness x:Key="UniformStandardMarginThickness">10</Thickness>
    <Thickness x:Key="RightStandardMarginThickness">0,0,10,0</Thickness>
    <Thickness x:Key="OuterTopMarginThickness">10,10,10,0</Thickness>
    <Thickness x:Key="OuterBottomMarginThickness">10,0,10,10</Thickness>
    <Thickness x:Key="SectionHeaderMarginThickness">0,10,0,5</Thickness>

    <!-- Базовый стиль для текстовых блоков (должен быть раньше ссылок на него) -->
    <Style x:Key="BaseTextBlockStyle" TargetType="TextBlock">
        <!-- FontSize и Foreground наследуются от Window, VerticalAlignment из глобального стиля TextBlock -->
    </Style>

    <!-- Стиль GroupBox: единые паддинги и заголовок -->
    <Style x:Key="BaseGroupBoxStyle" TargetType="GroupBox">
        <!-- Убрали внутренний Padding по умолчанию, чтобы избежать дублирования с Margin первого дочернего контейнера -->
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BorderBrush" Value="{StaticResource BorderSecondaryBrush}"/>
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}" 
                               Style="{StaticResource BaseTextBlockStyle}"
                               FontWeight="Bold"
                               Foreground="{StaticResource TextTertiaryBrush}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Стиль ToolTip: единые шрифты и отступы -->
    <Style x:Key="BaseToolTipStyle" TargetType="ToolTip">
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundPrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
        <Setter Property="BorderThickness" Value="{StaticResource StandardBorderThicknessValue}"/>
        <Setter Property="Padding" Value="{StaticResource StandardPaddingThickness}"/>
    </Style>

    <!-- Частые маргины для разделителей и сплиттеров -->
    <Thickness x:Key="VerticalSeparatorOuterMarginThickness">10,0,10,5</Thickness>
    <Thickness x:Key="VerticalSeparatorCenteredMarginThickness">10,5</Thickness>
    <Thickness x:Key="GridSplitterMarginThickness">0,12,0,5</Thickness>
    <Thickness x:Key="HorizontalStandardMarginThickness">10,0,10,0</Thickness>
    <Thickness x:Key="LeftTinyMarginThickness">2,0,0,0</Thickness>
    <Thickness x:Key="RightTinyPlusMarginThickness">0,0,4,0</Thickness>
    <Thickness x:Key="RightSmallPlusMarginThickness">0,0,6,0</Thickness>
    <Thickness x:Key="RightMediumMarginThickness">0,0,8,0</Thickness>
    <Thickness x:Key="RightLargeMarginThickness">0,0,15,0</Thickness>
    <Thickness x:Key="TopSmallMarginThickness">0,5,0,0</Thickness>
    <Thickness x:Key="BottomXLargeMarginThickness">0,0,0,20</Thickness>
    <Thickness x:Key="BottomSmallPlusMarginThickness">0,0,0,8</Thickness>
    <Thickness x:Key="BottomMediumMarginThickness">0,0,0,10</Thickness>
    <Thickness x:Key="BottomHairlineMarginThickness">0,0,0,1</Thickness>
    <Thickness x:Key="LeftTinyRightStandardMarginThickness">2,0,10,0</Thickness>
    <Thickness x:Key="GroupHeaderBorderMarginThickness">5,2,2,0</Thickness>
    <Thickness x:Key="HorizontalTinyMarginThickness">2,0</Thickness>
    <Thickness x:Key="HorizontalTinyVerticalHairlineMarginThickness">2,1</Thickness>
    <Thickness x:Key="LeftTinyBottomSmallMarginThickness">2,0,0,5</Thickness>
    <Thickness x:Key="VerticalHairlineMarginThickness">0,1,0,1</Thickness>
    <!-- Специальный отступ для чекбокса в настройке слоёв (компенсация каскадных отступов) -->
    <Thickness x:Key="CheckBoxOverrideMarginThickness">0,5,5,5</Thickness>

    <!-- Паддинги -->
    <Thickness x:Key="HorizontalSmallPaddingThickness">5,0</Thickness>
    <Thickness x:Key="LeftSmallPaddingThickness">5,0,0,0</Thickness>
    <Thickness x:Key="LabelInlinePaddingThickness">0,5,5,5</Thickness>
    <Thickness x:Key="SmallRectPaddingThickness">5,3</Thickness>
    <Thickness x:Key="UniformTinyPaddingThickness">2</Thickness>
    <Thickness x:Key="UniformSmallPaddingThickness">4</Thickness>
    <Thickness x:Key="LeftTinyPlusPaddingThickness">4,0,0,0</Thickness>
    <Thickness x:Key="StandardTopOnlyBorderThicknessValue">0,1,0,0</Thickness>

    <!-- Неравномерная толщина рамки -->
    <Thickness x:Key="StandardTopBorderThicknessValue">1,1,1,0</Thickness>

    <!-- Заголовки секций: текст -->
    <Style x:Key="SectionHeaderTextStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Margin" Value="{StaticResource SectionHeaderMarginThickness}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextTertiaryBrush}"/>
    </Style>

    <!-- Заголовок в оверлеях -->
    <Style x:Key="OverlayTitleTextStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Margin" Value="{StaticResource BottomSmallPlusMarginThickness}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>

    <!-- Подсказка в оверлеях -->
    <Style x:Key="OverlayHintTextStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="FontSize" Value="{StaticResource LargeFontSize}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextMutedBrush}"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="MaxWidth" Value="400"/>
    </Style>

    <!-- Базовые шаблоны для переиспользования -->
    
    <!-- Базовый шаблон для интерактивных кнопок -->
    <ControlTemplate x:Key="BaseInteractiveButtonTemplate" TargetType="Button">
        <Border Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Padding="{TemplateBinding Padding}">
            <ContentPresenter HorizontalAlignment="Center" 
                              VerticalAlignment="Center"
                              Content="{TemplateBinding Content}"
                              TextBlock.Foreground="{TemplateBinding Foreground}"
                              TextBlock.FontSize="{TemplateBinding FontSize}"/>
        </Border>
    </ControlTemplate>

    <!-- Специальный шаблон для overlay кнопок -->
    <ControlTemplate x:Key="OverlayButtonTemplate" TargetType="Button">
        <Border Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
            <ContentPresenter HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Margin="{TemplateBinding Padding}"/>
        </Border>
    </ControlTemplate>

    <!-- Базовые стили элементов управления -->

    <!-- Базовый стиль для всех элементов -->
    <Style x:Key="BaseControlStyle" TargetType="FrameworkElement">
        <Setter Property="Height" Value="{StaticResource StandardElementHeight}"/>
        <Setter Property="Margin" Value="{StaticResource TinyMarginThickness}"/>
    </Style>



    <!-- Базовый стиль для кнопок -->
    <Style x:Key="BaseButtonStyle" TargetType="Button">
        <Setter Property="Height" Value="{StaticResource StandardElementHeight}"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Padding" Value="{StaticResource ControlPaddingThickness}"/>
        <Setter Property="Margin" Value="{StaticResource TinyMarginThickness}"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundPrimaryBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="{StaticResource StandardBorderThicknessValue}"/>
    </Style>

    <!-- Базовый стиль для текстовых полей -->
    <Style x:Key="BaseTextBoxStyle" TargetType="TextBox">
        <Setter Property="Height" Value="{StaticResource StandardElementHeight}"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Padding" Value="{StaticResource TextBoxPaddingThickness}"/>
        <Setter Property="Margin" Value="{StaticResource TinyMarginThickness}"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundPrimaryBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="{StaticResource StandardBorderThicknessValue}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- Базовый стиль для комбобоксов -->
    <Style x:Key="BaseComboBoxStyle" TargetType="ComboBox">
        <Setter Property="Height" Value="{StaticResource StandardElementHeight}"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Padding" Value="{StaticResource ControlPaddingThickness}"/>
        <Setter Property="Margin" Value="{StaticResource TinyMarginThickness}"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundPrimaryBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="{StaticResource StandardBorderThicknessValue}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- Базовый стиль для чекбоксов -->
    <Style x:Key="BaseCheckBoxStyle" TargetType="CheckBox">
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Margin" Value="{StaticResource SmallMarginThickness}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Базовый стиль для радиокнопок -->
    <Style x:Key="BaseRadioButtonStyle" TargetType="RadioButton">
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Margin" Value="{StaticResource SmallMarginThickness}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Базовый стиль для лейблов -->
    <Style x:Key="BaseLabelStyle" TargetType="Label">
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Padding" Value="{StaticResource SmallPaddingThickness}"/>
    </Style>

    <!-- Глобальные стили для TabControl -->
    <Style TargetType="TabControl">
        <Setter Property="Padding" Value="5"/>
    </Style>

    <Style TargetType="TabItem">
        <Setter Property="Height" Value="{StaticResource StandardElementHeight}"/>
        <Setter Property="Margin" Value="-2,2,-2,0"/>
        <Setter Property="Padding" Value="10,2"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Foreground" Value="{StaticResource TextMutedBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="{StaticResource TextSecondaryBrush}"/>
                <Setter Property="Margin" Value="-2,0,-2,0"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource TextSecondaryBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Централизованный стиль для иконки добавления -->
    <Style x:Key="AddIconStyle" TargetType="Path">
        <Setter Property="Data" Value="{StaticResource AddIconGeometry}"/>
        <Setter Property="Stroke" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="StrokeThickness" Value="2"/>
        <Setter Property="Stretch" Value="Uniform"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=IsEnabled}" Value="False">
                <Setter Property="Stroke" Value="{DynamicResource TextDisabledBrush}"/>
                <Setter Property="Opacity" Value="0.5"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Стиль для элементов ListBox без стандартной подсветки -->
    <Style x:Key="CustomListBoxItemStyle" TargetType="ListBoxItem">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Стили для блока информации о документе -->
    <Style x:Key="DocumentInfoLabelStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Margin" Value="0,0,3,0"/>
    </Style>

    <Style x:Key="DocumentInfoValueStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="Margin" Value="5,0,0,0"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

    <Style x:Key="ModelStateValueStyle" TargetType="TextBlock" BasedOn="{StaticResource DocumentInfoValueStyle}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsPrimaryModelState}" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ErrorBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Базовый стиль для кнопки с прогресс-баром -->
    <Style x:Key="BaseProgressButtonStyle" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="Border" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="0">
                            <Grid>
                                <!-- Прогресс-бар как фон -->
                                <ProgressBar x:Name="PART_ProgressBar" 
                                       Background="{DynamicResource TransparentBrush}"
                                       Foreground="{DynamicResource ProgressBarBrush}"
                                       BorderThickness="0"
                                       Minimum="0" 
                                       Maximum="100" 
                                       Value="{TemplateBinding Tag}"/>

                                <!-- Контент кнопки поверх прогресса -->
                                <ContentPresenter x:Name="ContentPresenter"
                                            HorizontalAlignment="Center" 
                                            VerticalAlignment="Center"
                                            Content="{TemplateBinding Content}"
                                            TextBlock.Foreground="{TemplateBinding Foreground}"
                                            TextBlock.FontSize="{TemplateBinding FontSize}"/>
                            </Grid>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource HighlightBrush}"/>
                            <Setter TargetName="PART_ProgressBar" Property="Opacity" Value="0.6"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource HighlightBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource HoverBackgroundBrush}"/>
                            <Setter TargetName="ContentPresenter" Property="TextBlock.Foreground" Value="{StaticResource TextDisabledBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource BackgroundPrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource TextDisabledBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

    <!-- Крупная квадратная кнопка (унификация для toolbar-кнопок) -->
    <Style x:Key="LargeSquareButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Width" Value="75"/>
        <Setter Property="Height" Value="75"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- Крупная квадратная прогресс-кнопка -->
    <Style x:Key="LargeSquareProgressButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseProgressButtonStyle}">
        <Setter Property="Width" Value="75"/>
        <Setter Property="Height" Value="75"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- Универсальный стиль для токенов в виде блоков -->
    <Style x:Key="TokenBlockStyle" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource TokenBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="6,4"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
            </Trigger>
            <!-- Стиль для кастомных токенов -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Tag}" Value="CustomText">
                <Setter Property="Background" Value="{DynamicResource TokenCustomBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource TokenCustomBorderBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Стиль для текста внутри токенов -->
    <Style x:Key="TokenTextStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Стиль для токенов в ListBox (наследует от универсального) -->
    <Style x:Key="TokenItemStyle" TargetType="ListBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="TokenBorder" Style="{StaticResource TokenBlockStyle}">
                        <TextBlock Text="{Binding DisplayName}" Style="{StaticResource TokenTextStyle}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="TokenBorder" Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Стиль для ListBox с токенами -->
    <Style x:Key="TokenListBoxStyle" TargetType="ListBox">
        <Setter Property="Background" Value="{DynamicResource BackgroundPrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="{StaticResource StandardBorderThicknessValue}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource TokenItemStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{StaticResource UniformTinyPaddingThickness}">
                        <ScrollViewer Focusable="False"
                                      HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                      VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Стиль для кнопки-предупреждения -->
    <Style x:Key="WarningButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource WarningBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Базовый стиль для стандартных кнопок действий -->
    <Style x:Key="BaseActionButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="MinWidth" Value="{StaticResource StandardButtonMinWidth}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>

    <!-- Стиль для кнопок действий с левым отступом -->
    <Style x:Key="LeftMarginActionButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseActionButtonStyle}">
        <Setter Property="Margin" Value="5,0,0,0"/>
    </Style>

    <Style x:Key="ToolbarWarningButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseActionButtonStyle}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource WarningBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Стиль для кнопки на оверлее -->
    <Style x:Key="OverlayButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Padding" Value="{StaticResource ButtonPaddingThickness}"/>
        <Setter Property="FontSize" Value="{StaticResource LargeFontSize}"/>
        <Setter Property="Background" Value="{DynamicResource SelectionBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderSecondaryBrush}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template" Value="{StaticResource OverlayButtonTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BorderTertiaryBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BorderDarkBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Базовый стиль для разделителей -->
    <Style x:Key="BaseSeparatorStyle" TargetType="Separator">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Separator">
                    <Rectangle Fill="{DynamicResource SeparatorBrush}" Opacity="0.25"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="{StaticResource SmallMarginThickness}"/>
    </Style>

    <!-- Стиль для вертикального разделителя -->
    <Style x:Key="VerticalSeparatorStyle" TargetType="Separator" BasedOn="{StaticResource BaseSeparatorStyle}">
        <Setter Property="Width" Value="1"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
    </Style>

    <!-- Стиль для горизонтального разделителя -->
    <Style x:Key="HorizontalSeparatorStyle" TargetType="Separator" BasedOn="{StaticResource BaseSeparatorStyle}">
        <Setter Property="Height" Value="1"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Стиль для предпросмотра имени файла -->
    <Style x:Key="FileNamePreviewBorderStyle" TargetType="Border">
        <Setter Property="MinHeight" Value="{StaticResource StandardElementHeight}"/>
        <Setter Property="Padding" Value="8,4"/>
        <Setter Property="BorderThickness" Value="{StaticResource StandardBorderThicknessValue}"/>
        <Setter Property="Background" Value="{DynamicResource PreviewWarningBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
        <Style.Triggers>
            <!-- Триггеры валидации (работают только когда функция включена и шаблон не пустой) -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding EnableFileNameConstructor}" Value="True"/>
                    <Condition Binding="{Binding TokenService.IsFileNameTemplateValid}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource PreviewValidBackgroundBrush}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource PreviewValidBorderBrush}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding EnableFileNameConstructor}" Value="True"/>
                    <Condition Binding="{Binding TokenService.IsFileNameTemplateValid}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource PreviewWarningBackgroundBrush}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource PreviewWarningBorderBrush}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <!-- Приоритетные триггеры: нейтральный вид когда функция отключена или шаблон пустой (ПОСЛЕДНИЕ - высший приоритет) -->
            <DataTrigger Binding="{Binding EnableFileNameConstructor}" Value="False">
                <Setter Property="Background" Value="{DynamicResource PreviewWarningBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TokenService.FileNameTemplate}" Value="">
                <Setter Property="Background" Value="{DynamicResource PreviewWarningBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Стиль для текста предпросмотра имени файла -->
    <Style x:Key="FileNamePreviewTextStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="FontFamily" Value="Consolas"/>
        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
    </Style>

    <!-- Стиль для кнопок символов в конструкторе имени файла -->
    <Style x:Key="SymbolButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Width" Value="{StaticResource StandardElementHeight}"/>
        <Setter Property="Margin" Value="0,0,3,0"/>
    </Style>

    <!-- Стили для элементов конструктора имени файла -->
    <Style x:Key="FileNameInputTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource BaseTextBoxStyle}">
        <Setter Property="Width" Value="200"/>
    </Style>

    <Style x:Key="FileNameActionButtonStyle" TargetType="Button" BasedOn="{StaticResource LeftMarginActionButtonStyle}"/>

    <Style x:Key="PresetComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource BaseComboBoxStyle}"/>

    <Style x:Key="PresetDeleteButtonStyle" TargetType="Button" BasedOn="{StaticResource LeftMarginActionButtonStyle}">
        <Setter Property="Background" Value="{DynamicResource TokenBackgroundBrush}"/>
        <Setter Property="Template" Value="{StaticResource BaseInteractiveButtonTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource RedLightBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource RedLightBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource RedMediumBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource RedMediumBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource SelectionBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource TextDisabledBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Универсальный стиль для кнопок сброса -->
    <Style x:Key="ResetButtonStyle" TargetType="Button">
        <Setter Property="Content" Value="✖"/>
        <Setter Property="Foreground" Value="{DynamicResource ErrorBrush}"/>
        <Setter Property="FontSize" Value="{StaticResource SmallFontSize}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Width" Value="{StaticResource StandardElementHeight}"/>
        <Setter Property="Height" Value="{StaticResource StandardElementHeight}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Background" Value="{DynamicResource TokenBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="{StaticResource StandardBorderThicknessValue}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template" Value="{StaticResource BaseInteractiveButtonTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource RedLightBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource RedLightBorderBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource ErrorDarkBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource RedMediumBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource RedMediumBorderBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource ErrorDarkBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource SelectionBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource TextDisabledBrush}"/>
                <Setter Property="Cursor" Value="Arrow"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Простой стиль для TreeView -->
    <Style x:Key="ConflictTreeViewStyle" TargetType="TreeView">
        <Setter Property="Background" Value="{DynamicResource BackgroundPrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="{StaticResource StandardBorderThicknessValue}"/>
        <Setter Property="Padding" Value="{StaticResource StandardPaddingThickness}"/>
    </Style>

    <!-- Простой стиль для TreeViewItem -->
    <Style x:Key="ConflictTreeViewItemStyle" TargetType="TreeViewItem">
        <Setter Property="IsExpanded" Value="True"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Margin" Value="0,1"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource AccentBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource BackgroundPrimaryBrush}"/>
            </Trigger>
        </Style.Triggers>
        <Style.Resources>
            <!-- Стиль для TextBlock внутри TreeViewItem -->
            <Style TargetType="TextBlock">
                <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem}, Path=IsSelected}" Value="True">
                        <Setter Property="Foreground" Value="{DynamicResource BackgroundPrimaryBrush}"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- Стиль для TextBlock дочерних элементов (файлов) -->
            <Style TargetType="TextBlock" x:Key="FileTextBlockStyle" BasedOn="{StaticResource {x:Type TextBlock}}">
                <Setter Property="Foreground" Value="{DynamicResource TextMutedBrush}"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem}, Path=IsSelected}" Value="True">
                        <Setter Property="Foreground" Value="{DynamicResource BackgroundPrimaryBrush}"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>

    <!-- Стиль для кнопок спиннера (множитель) -->
    <Style x:Key="SpinnerButtonStyle" TargetType="Button">
        <Setter Property="Width" Value="20"/>
        <Setter Property="Height" Value="12"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="FontSize" Value="6"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundPrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="{StaticResource StandardBorderThicknessValue}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template" Value="{StaticResource BaseInteractiveButtonTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BorderTertiaryBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource SelectionBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BorderDarkBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource SelectionBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextDisabledBrush}"/>
                <Setter Property="Cursor" Value="Arrow"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Стиль для StatusBar -->
    <Style x:Key="BaseStatusBarStyle" TargetType="StatusBar">
        <Setter Property="Background" Value="{DynamicResource BackgroundSecondaryBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
        <Setter Property="BorderThickness" Value="0,1,0,0"/>
        <Setter Property="Height" Value="{StaticResource LargeElementHeight}"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
    </Style>

    <!-- Стиль для StatusBarItem -->
    <Style x:Key="BaseStatusBarItemStyle" TargetType="StatusBarItem">
        <Setter Property="Padding" Value="10,2"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Низ диалогов: панель с кнопками -->
    <Style x:Key="DialogBottomBarStyle" TargetType="Border">
        <Setter Property="Background" Value="{StaticResource BackgroundTertiaryBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BorderSecondaryBrush}"/>
        <Setter Property="BorderThickness" Value="{StaticResource StandardTopOnlyBorderThicknessValue}"/>
        <Setter Property="Padding" Value="{StaticResource StandardPaddingThickness}"/>
    </Style>

    <!-- Стиль для Expander с прямыми углами -->
    <Style x:Key="SquareExpanderStyle" TargetType="Expander" BasedOn="{StaticResource {x:Type Expander}}">
        <Setter Property="BorderBrush" Value="{StaticResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="{StaticResource StandardBorderThicknessValue}"/>
        <Setter Property="Background" Value="{StaticResource BackgroundSecondaryBrush}"/>
        <!-- Убрали Padding, чтобы избежать наложения с Margin корневых контейнеров вкладок -->
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="0">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite"
                                          DockPanel.Dock="Top"
                                          Height="{StaticResource LargeElementHeight}"
                                          IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                          Content="{TemplateBinding Header}">
                                <ToggleButton.Template>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <Border Background="{DynamicResource TransparentBrush}" Padding="{StaticResource UniformSmallPaddingThickness}">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="20"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <Path x:Name="Arrow" 
                                                      Grid.Column="0"
                                                      Data="M0,0 L4,4 L8,0 Z"
                                                      Fill="{DynamicResource TextSecondaryBrush}"
                                                      VerticalAlignment="Center"
                                                      HorizontalAlignment="Center"
                                                      RenderTransformOrigin="0.5,0.5">
                                                    <Path.RenderTransform>
                                                        <RotateTransform Angle="0"/>
                                                    </Path.RenderTransform>
                                                </Path>
                                                <ContentPresenter Grid.Column="1" 
                                                                  VerticalAlignment="Center"
                                                                  HorizontalAlignment="Left"/>
                                            </Grid>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsChecked" Value="True">
                                                <Setter TargetName="Arrow" Property="RenderTransform">
                                                    <Setter.Value>
                                                        <RotateTransform Angle="180"/>
                                                    </Setter.Value>
                                                </Setter>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </ToggleButton.Template>
                            </ToggleButton>

                            <ContentPresenter x:Name="ExpandSite"
                                              Visibility="Collapsed"
                                              DockPanel.Dock="Top"
                                              Margin="{TemplateBinding Padding}"/>
                        </DockPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
