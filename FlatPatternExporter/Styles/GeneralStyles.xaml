<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- SVG иконка добавления - простой плюс -->
    <Geometry x:Key="AddIconGeometry">M12,2 L12,22 M2,12 L22,12</Geometry>

    <!-- Централизованный стиль для иконки добавления -->
    <Style x:Key="AddIconStyle" TargetType="Path">
        <Setter Property="Data" Value="{StaticResource AddIconGeometry}"/>
        <Setter Property="Stroke" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="StrokeThickness" Value="2"/>
        <Setter Property="Stretch" Value="Uniform"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Стили для блока информации о документе -->
    <Style x:Key="DocumentInfoLabelStyle" TargetType="TextBlock">
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Margin" Value="0,0,3,0"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="DocumentInfoValueStyle" TargetType="TextBlock">
        <Setter Property="Margin" Value="5,0,0,0"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="ModelStateValueStyle" TargetType="TextBlock" BasedOn="{StaticResource DocumentInfoValueStyle}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsPrimaryModelState}" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ErrorBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Базовый стиль для кнопки с прогресс-баром -->
    <Style x:Key="BaseProgressButtonStyle" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="Border" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="0">
                            <Grid>
                                <!-- Прогресс-бар как фон -->
                                <ProgressBar x:Name="PART_ProgressBar" 
                                       Background="Transparent"
                                       Foreground="{DynamicResource ProgressBarBrush}"
                                       BorderThickness="0"
                                       Minimum="0" 
                                       Maximum="100" 
                                       Value="{TemplateBinding Tag}"/>

                                <!-- Контент кнопки поверх прогресса -->
                                <ContentPresenter x:Name="ContentPresenter"
                                            HorizontalAlignment="Center" 
                                            VerticalAlignment="Center"
                                            Content="{TemplateBinding Content}"
                                            TextBlock.Foreground="{TemplateBinding Foreground}"/>
                            </Grid>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#FFF0F0F0"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#FFE0E0E0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="#FFF0F0F0"/>
                            <Setter TargetName="ContentPresenter" Property="TextBlock.Foreground" Value="#FF888888"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource BackgroundPrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource TextDisabledBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

    <!-- Универсальный стиль для токенов в виде блоков -->
    <Style x:Key="TokenBlockStyle" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource TokenBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="6,4"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
            </Trigger>
            <!-- Стиль для кастомных токенов -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Tag}" Value="CustomText">
                <Setter Property="Background" Value="{DynamicResource TokenCustomBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource TokenCustomBorderBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Стиль для текста внутри токенов -->
    <Style x:Key="TokenTextStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Стиль для токенов в ListBox (наследует от универсального) -->
    <Style x:Key="TokenItemStyle" TargetType="ListBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="TokenBorder" Style="{StaticResource TokenBlockStyle}">
                        <TextBlock Text="{Binding}" Style="{StaticResource TokenTextStyle}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="TokenBorder" Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Стиль для ListBox с токенами -->
    <Style x:Key="TokenListBoxStyle" TargetType="ListBox">
        <Setter Property="Background" Value="{DynamicResource BackgroundPrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource TokenItemStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="2">
                        <ScrollViewer Focusable="False"
                                      HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                      VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Стиль для кнопки-предупреждения -->
    <Style x:Key="WarningButtonStyle" TargetType="Button">
        <Setter Property="BorderBrush" Value="{DynamicResource TextDisabledBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource WarningBrush}"/>
                <Setter Property="BorderThickness" Value="1"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Стиль для кнопки на оверлее -->
    <Style x:Key="OverlayButtonStyle" TargetType="Button">
        <Setter Property="Padding" Value="12,6"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Background" Value="{DynamicResource SelectionBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderSecondaryBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Margin="{TemplateBinding Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource BorderTertiaryBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource BorderDarkBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Базовый стиль для разделителей -->
    <Style x:Key="BaseSeparatorStyle" TargetType="Separator">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Separator">
                    <Rectangle Fill="{DynamicResource SeparatorBrush}" Opacity="0.25"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="5"/>
    </Style>

    <!-- Стиль для вертикального разделителя -->
    <Style x:Key="VerticalSeparatorStyle" TargetType="Separator" BasedOn="{StaticResource BaseSeparatorStyle}">
        <Setter Property="Width" Value="1"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
    </Style>

    <!-- Стиль для горизонтального разделителя -->
    <Style x:Key="HorizontalSeparatorStyle" TargetType="Separator" BasedOn="{StaticResource BaseSeparatorStyle}">
        <Setter Property="Height" Value="1"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Стиль для предпросмотра имени файла -->
    <Style x:Key="FileNamePreviewBorderStyle" TargetType="Border">
        <Setter Property="Height" Value="24"/>
        <Setter Property="Padding" Value="8,6"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource PreviewWarningBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
        <Style.Triggers>
            <!-- Триггеры валидации (работают только когда функция включена и шаблон не пустой) -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding EnableFileNameConstructor}" Value="True"/>
                    <Condition Binding="{Binding TokenService.IsFileNameTemplateValid}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource PreviewValidBackgroundBrush}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource PreviewValidBorderBrush}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding EnableFileNameConstructor}" Value="True"/>
                    <Condition Binding="{Binding TokenService.IsFileNameTemplateValid}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource PreviewWarningBackgroundBrush}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource PreviewWarningBorderBrush}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <!-- Приоритетные триггеры: нейтральный вид когда функция отключена или шаблон пустой (ПОСЛЕДНИЕ - высший приоритет) -->
            <DataTrigger Binding="{Binding EnableFileNameConstructor}" Value="False">
                <Setter Property="Background" Value="{DynamicResource PreviewWarningBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TokenService.FileNameTemplate}" Value="">
                <Setter Property="Background" Value="{DynamicResource PreviewWarningBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Стиль для текста предпросмотра имени файла -->
    <Style x:Key="FileNamePreviewTextStyle" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="Consolas"/>
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
    </Style>

    <!-- Стиль для кнопок символов в конструкторе имени файла -->
    <Style x:Key="SymbolButtonStyle" TargetType="Button">
        <Setter Property="Width" Value="24"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Margin" Value="0,0,3,0"/>
    </Style>

    <!-- Стили для элементов конструктора имени файла -->
    <Style x:Key="FileNameInputTextBoxStyle" TargetType="TextBox">
        <Setter Property="Width" Value="200"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundPrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="2,6"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <Style x:Key="FileNameActionButtonStyle" TargetType="Button">
        <Setter Property="Height" Value="24"/>
        <Setter Property="Margin" Value="5,0,0,0"/>
        <Setter Property="Padding" Value="5,0,5,0"/>
    </Style>

    <Style x:Key="PresetComboBoxStyle" TargetType="ComboBox">
        <Setter Property="Height" Value="24"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundPrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="6,4"/>
    </Style>

    <Style x:Key="PresetDeleteButtonStyle" TargetType="Button">
        <Setter Property="Height" Value="24"/>
        <Setter Property="Margin" Value="5,0,0,0"/>
        <Setter Property="Padding" Value="5,0,5,0"/>
        <Setter Property="MinWidth" Value="60"/>
        <Setter Property="Background" Value="{DynamicResource TokenBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="Center" 
                                          VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource RedLightBackgroundBrush}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource RedLightBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource RedMediumBackgroundBrush}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource RedMediumBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource SelectionBackgroundBrush}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
                            <Setter Property="Foreground" Value="#999999"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Универсальный стиль для кнопок сброса -->
    <Style x:Key="ResetButtonStyle" TargetType="Button">
        <Setter Property="Content" Value="✖"/>
        <Setter Property="Foreground" Value="{DynamicResource ErrorBrush}"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Width" Value="24"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Background" Value="{DynamicResource TokenBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter HorizontalAlignment="Center" 
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding Content}"
                                          TextBlock.Foreground="{TemplateBinding Foreground}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource RedLightBackgroundBrush}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource RedLightBorderBrush}"/>
                            <Setter Property="Foreground" Value="#CC0000"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource RedMediumBackgroundBrush}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource RedMediumBorderBrush}"/>
                            <Setter Property="Foreground" Value="#990000"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource SelectionBackgroundBrush}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
                            <Setter Property="Foreground" Value="#CCCCCC"/>
                            <Setter Property="Cursor" Value="Arrow"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Простой стиль для TreeView -->
    <Style x:Key="ConflictTreeViewStyle" TargetType="TreeView">
        <Setter Property="Background" Value="{DynamicResource BackgroundPrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="10"/>
    </Style>

    <!-- Простой стиль для TreeViewItem -->
    <Style x:Key="ConflictTreeViewItemStyle" TargetType="TreeViewItem">
        <Setter Property="IsExpanded" Value="True"/>
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="Margin" Value="0,1"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource AccentBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource BackgroundPrimaryBrush}"/>
            </Trigger>
        </Style.Triggers>
        <Style.Resources>
            <!-- Стиль для TextBlock внутри TreeViewItem -->
            <Style TargetType="TextBlock">
                <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem}, Path=IsSelected}" Value="True">
                        <Setter Property="Foreground" Value="{DynamicResource BackgroundPrimaryBrush}"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            
            <!-- Стиль для TextBlock дочерних элементов (файлов) -->
            <Style TargetType="TextBlock" x:Key="FileTextBlockStyle" BasedOn="{StaticResource {x:Type TextBlock}}">
                <Setter Property="Foreground" Value="{DynamicResource TextMutedBrush}"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem}, Path=IsSelected}" Value="True">
                        <Setter Property="Foreground" Value="{DynamicResource BackgroundPrimaryBrush}"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>

    <!-- Стиль для кнопок спиннера (множитель) -->
    <Style x:Key="SpinnerButtonStyle" TargetType="Button">
        <Setter Property="Width" Value="20"/>
        <Setter Property="Height" Value="12"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="FontSize" Value="6"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundPrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter HorizontalAlignment="Center" 
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding Content}"
                                          TextBlock.Foreground="{TemplateBinding Foreground}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource BorderTertiaryBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SelectionBackgroundBrush}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource BorderDarkBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource SelectionBackgroundBrush}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource TextDisabledBrush}"/>
                            <Setter Property="Cursor" Value="Arrow"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>