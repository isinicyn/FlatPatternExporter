<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <!-- Design system: base values -->

    <!-- Sizes and margins -->
    <sys:Double x:Key="StandardElementHeight">24</sys:Double>
    <sys:Double x:Key="LargeElementHeight">32</sys:Double>
    <sys:Double x:Key="StandardButtonMinWidth">80</sys:Double>
    <sys:Double x:Key="StandardFontSize">11</sys:Double>
    <sys:Double x:Key="SmallFontSize">10</sys:Double>
    <sys:Double x:Key="LargeFontSize">12</sys:Double>
    <sys:Double x:Key="StandardPadding">10</sys:Double>
    <sys:Double x:Key="SmallPadding">5</sys:Double>
    <sys:Double x:Key="LargePadding">15</sys:Double>
    <sys:Double x:Key="StandardMargin">10</sys:Double>
    <sys:Double x:Key="SmallMargin">5</sys:Double>
    <sys:Double x:Key="TinyMargin">2</sys:Double>
    <sys:Double x:Key="StandardBorderThickness">1</sys:Double>

    <!-- Icon sizes -->
    <sys:Double x:Key="SmallIconSize">12</sys:Double>
    <sys:Double x:Key="MediumIconSize">14</sys:Double>
    <sys:Double x:Key="StandardIconSize">16</sys:Double>
    <sys:Double x:Key="LargeIconSize">24</sys:Double>

    <!-- Button sizes -->
    <sys:Double x:Key="SmallButtonWidth">30</sys:Double>
    <sys:Double x:Key="LargeSquareButtonSize">75</sys:Double>
    <sys:Double x:Key="SpinnerButtonWidth">20</sys:Double>
    <sys:Double x:Key="SpinnerButtonHeight">12</sys:Double>
    <sys:Double x:Key="IconButtonSize">24</sys:Double>
    <Thickness x:Key="IconButtonPadding">4</Thickness>

    <!-- Standard margins for elements -->
    <Thickness x:Key="StandardMarginThickness">6</Thickness>
    <Thickness x:Key="SmallMarginThickness">5</Thickness>
    <Thickness x:Key="TinyMarginThickness">2</Thickness>
    <Thickness x:Key="StandardPaddingThickness">10,5</Thickness>
    <Thickness x:Key="SmallPaddingThickness">5,2</Thickness>
    <Thickness x:Key="ButtonPaddingThickness">12,6</Thickness>
    <Thickness x:Key="ControlPaddingThickness">6,4</Thickness>
    <Thickness x:Key="TextBoxPaddingThickness">2,0,2,0</Thickness>
    <Thickness x:Key="StandardBorderThicknessValue">1</Thickness>

    <!-- Directional and combined margins (commonly used) -->
    <Thickness x:Key="RightSmallMarginThickness">0,0,5,0</Thickness>
    <Thickness x:Key="LeftSmallMarginThickness">5,0,0,0</Thickness>
    <Thickness x:Key="BottomSmallMarginThickness">0,0,0,5</Thickness>
    <Thickness x:Key="BottomLargeMarginThickness">0,0,0,15</Thickness>
    <Thickness x:Key="HorizontalSmallMarginThickness">5,0</Thickness>
    <Thickness x:Key="VerticalSmallMarginThickness">0,5</Thickness>
    <Thickness x:Key="VerticalTinyMarginThickness">0,2</Thickness>
    <Thickness x:Key="SectionContentMarginThickness">10,5,10,5</Thickness>
    <Thickness x:Key="UniformStandardMarginThickness">10</Thickness>
    <Thickness x:Key="RightStandardMarginThickness">0,0,10,0</Thickness>
    <Thickness x:Key="OuterTopMarginThickness">10,10,10,0</Thickness>
    <Thickness x:Key="OuterBottomMarginThickness">10,0,10,10</Thickness>
    <Thickness x:Key="SectionHeaderMarginThickness">0,10,0,5</Thickness>

    <!-- Base style for text blocks (must be before references to it) -->
    <Style x:Key="BaseTextBlockStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- GroupBox style: unified padding and header -->
    <Style x:Key="BaseGroupBoxStyle" TargetType="GroupBox">
        <!-- Removed default internal Padding to avoid duplication with Margin of first child container -->
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderSecondaryBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0" Grid.RowSpan="2"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="0"
                                Margin="-1">
                        </Border>
                        <Border Grid.Row="0"
                                Background="{DynamicResource BackgroundPrimaryBrush}"
                                Padding="5,0,5,0"
                                Margin="10,-9,0,0"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Top">
                            <ContentPresenter ContentSource="Header"
                                              TextBlock.Foreground="{DynamicResource TextTertiaryBrush}"
                                              TextBlock.FontWeight="Bold"/>
                        </Border>
                        <ContentPresenter Grid.Row="1"
                                          Margin="{TemplateBinding Padding}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ToolTip style: unified fonts and padding -->
    <Style x:Key="BaseToolTipStyle" TargetType="ToolTip">
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundPrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
        <Setter Property="BorderThickness" Value="{StaticResource StandardBorderThicknessValue}"/>
        <Setter Property="Padding" Value="{StaticResource StandardPaddingThickness}"/>
    </Style>

    <!-- Common margins for separators and splitters -->
    <Thickness x:Key="VerticalSeparatorOuterMarginThickness">10,0,10,5</Thickness>
    <Thickness x:Key="VerticalSeparatorCenteredMarginThickness">10,5</Thickness>
    <Thickness x:Key="GridSplitterMarginThickness">0,12,0,5</Thickness>
    <Thickness x:Key="HorizontalStandardMarginThickness">10,0,10,0</Thickness>
    <Thickness x:Key="LeftTinyMarginThickness">2,0,0,0</Thickness>
    <Thickness x:Key="RightTinyPlusMarginThickness">0,0,4,0</Thickness>
    <Thickness x:Key="RightSmallPlusMarginThickness">0,0,6,0</Thickness>
    <Thickness x:Key="RightMediumMarginThickness">0,0,8,0</Thickness>
    <Thickness x:Key="RightLargeMarginThickness">0,0,15,0</Thickness>
    <Thickness x:Key="TopSmallMarginThickness">0,5,0,0</Thickness>
    <Thickness x:Key="BottomXLargeMarginThickness">0,0,0,20</Thickness>
    <Thickness x:Key="BottomSmallPlusMarginThickness">0,0,0,8</Thickness>
    <Thickness x:Key="BottomMediumMarginThickness">0,0,0,10</Thickness>
    <Thickness x:Key="BottomHairlineMarginThickness">0,0,0,1</Thickness>
    <Thickness x:Key="LeftTinyRightStandardMarginThickness">2,0,10,0</Thickness>
    <Thickness x:Key="GroupHeaderBorderMarginThickness">5,2,2,0</Thickness>
    <Thickness x:Key="HorizontalTinyMarginThickness">2,0</Thickness>
    <Thickness x:Key="HorizontalTinyVerticalHairlineMarginThickness">2,1</Thickness>
    <Thickness x:Key="LeftTinyBottomSmallMarginThickness">2,0,0,5</Thickness>
    <Thickness x:Key="VerticalHairlineMarginThickness">0,1,0,1</Thickness>
    <!-- Special margin for checkbox in layer settings (compensates for cascading margins) -->
    <Thickness x:Key="CheckBoxOverrideMarginThickness">0,5,5,5</Thickness>

    <!-- Paddings -->
    <Thickness x:Key="HorizontalSmallPaddingThickness">5,0</Thickness>
    <Thickness x:Key="LeftSmallPaddingThickness">5,0,0,0</Thickness>
    <Thickness x:Key="LabelInlinePaddingThickness">0,5,5,5</Thickness>
    <Thickness x:Key="SmallRectPaddingThickness">5,3</Thickness>
    <Thickness x:Key="UniformTinyPaddingThickness">2</Thickness>
    <Thickness x:Key="UniformSmallPaddingThickness">4</Thickness>
    <Thickness x:Key="LeftTinyPlusPaddingThickness">4,0,0,0</Thickness>
    <Thickness x:Key="StandardTopOnlyBorderThicknessValue">0,1,0,0</Thickness>

    <!-- Non-uniform border thickness -->
    <Thickness x:Key="StandardTopBorderThicknessValue">1,1,1,0</Thickness>

    <!-- Section headers: text -->
    <Style x:Key="SectionHeaderTextStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Margin" Value="{StaticResource SectionHeaderMarginThickness}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextTertiaryBrush}"/>
    </Style>

    <!-- Header in overlays -->
    <Style x:Key="OverlayTitleTextStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Margin" Value="{StaticResource BottomSmallPlusMarginThickness}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>

    <!-- Hint in overlays -->
    <Style x:Key="OverlayHintTextStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="FontSize" Value="{StaticResource LargeFontSize}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextMutedBrush}"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="MaxWidth" Value="400"/>
    </Style>


    <!-- Base styles for controls -->

    <!-- Base style for all elements -->
    <Style x:Key="BaseControlStyle" TargetType="FrameworkElement">
        <Setter Property="Height" Value="{StaticResource StandardElementHeight}"/>
        <Setter Property="Margin" Value="{StaticResource TinyMarginThickness}"/>
    </Style>




    <!-- Base style for text boxes -->
    <Style x:Key="BaseTextBoxStyle" TargetType="TextBox">
        <Setter Property="Height" Value="{StaticResource StandardElementHeight}"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Padding" Value="{StaticResource TextBoxPaddingThickness}"/>
        <Setter Property="Margin" Value="{StaticResource TinyMarginThickness}"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundPrimaryBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="{StaticResource StandardBorderThicknessValue}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- Base style for combo boxes -->
    <Style x:Key="BaseComboBoxStyle" TargetType="ComboBox">
        <Setter Property="Height" Value="{StaticResource StandardElementHeight}"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Padding" Value="{StaticResource ControlPaddingThickness}"/>
        <Setter Property="Margin" Value="{StaticResource TinyMarginThickness}"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundPrimaryBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="{StaticResource StandardBorderThicknessValue}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton Name="ToggleButton"
                                      Focusable="false"
                                      IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                      ClickMode="Press">
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="ToggleButton">
                                    <Border Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition/>
                                                <ColumnDefinition Width="20"/>
                                            </Grid.ColumnDefinitions>
                                            <Path Grid.Column="1"
                                                  HorizontalAlignment="Center"
                                                  VerticalAlignment="Center"
                                                  Data="M 0 0 L 4 4 L 8 0 Z"
                                                  Fill="{DynamicResource TextSecondaryBrush}"/>
                                        </Grid>
                                    </Border>
                                </ControlTemplate>
                            </ToggleButton.Template>
                            <ToggleButton.Style>
                                <Style TargetType="ToggleButton">
                                    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource AncestorType=ComboBox}}"/>
                                    <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource AncestorType=ComboBox}}"/>
                                    <Setter Property="BorderThickness" Value="{Binding BorderThickness, RelativeSource={RelativeSource AncestorType=ComboBox}}"/>
                                </Style>
                            </ToggleButton.Style>
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite"
                                          IsHitTestVisible="False"
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                          Margin="5,0,25,0"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Left"/>
                        <TextBox x:Name="PART_EditableTextBox"
                                 Style="{x:Null}"
                                 HorizontalAlignment="Left"
                                 VerticalAlignment="Center"
                                 Margin="{TemplateBinding Padding}"
                                 Focusable="True"
                                 Background="Transparent"
                                 Foreground="{TemplateBinding Foreground}"
                                 Visibility="Hidden"
                                 IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup Name="Popup"
                               Placement="Bottom"
                               IsOpen="{TemplateBinding IsDropDownOpen}"
                               AllowsTransparency="True"
                               Focusable="False"
                               PopupAnimation="Slide">
                            <Grid Name="DropDown"
                                  SnapsToDevicePixels="True"
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder"
                                        Background="{DynamicResource BackgroundSecondaryBrush}"
                                        BorderBrush="{DynamicResource BorderPrimaryBrush}"
                                        BorderThickness="1">
                                    <ScrollViewer Margin="0" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                    </ScrollViewer>
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="ToggleButton" Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="ToggleButton" Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0"/>
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Base style for checkboxes -->
    <Style x:Key="BaseCheckBoxStyle" TargetType="CheckBox">
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Margin" Value="{StaticResource SmallMarginThickness}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <StackPanel Orientation="Horizontal">
                        <Border x:Name="Border"
                                Width="16"
                                Height="16"
                                Background="{DynamicResource BackgroundPrimaryBrush}"
                                BorderBrush="{DynamicResource BorderPrimaryBrush}"
                                BorderThickness="1"
                                VerticalAlignment="Center">
                            <Path x:Name="CheckMark"
                                  Data="M 0 4 L 3 7 L 8 0"
                                  Stroke="{DynamicResource TextSecondaryBrush}"
                                  StrokeThickness="2"
                                  Visibility="Collapsed"
                                  Margin="2"/>
                        </Border>
                        <ContentPresenter Margin="4,0,0,0"
                                          VerticalAlignment="Center"
                                          RecognizesAccessKey="True"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Base style for radio buttons -->
    <Style x:Key="BaseRadioButtonStyle" TargetType="RadioButton">
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Margin" Value="{StaticResource SmallMarginThickness}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <StackPanel Orientation="Horizontal">
                        <Grid Width="16" Height="16" VerticalAlignment="Center">
                            <Ellipse x:Name="Border"
                                     Fill="{DynamicResource BackgroundPrimaryBrush}"
                                     Stroke="{DynamicResource BorderPrimaryBrush}"
                                     StrokeThickness="1"/>
                            <Ellipse x:Name="CheckMark"
                                     Width="8"
                                     Height="8"
                                     Fill="{DynamicResource TextSecondaryBrush}"
                                     Visibility="Collapsed"/>
                        </Grid>
                        <ContentPresenter Margin="4,0,0,0"
                                          VerticalAlignment="Center"
                                          RecognizesAccessKey="True"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource AccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Base style for labels -->
    <Style x:Key="BaseLabelStyle" TargetType="Label">
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Padding" Value="{StaticResource SmallPaddingThickness}"/>
    </Style>

    <!-- Global styles for TabControl -->
    <Style TargetType="TabControl">
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundPrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
    </Style>

    <Style TargetType="TabItem">
        <Setter Property="Height" Value="{StaticResource StandardElementHeight}"/>
        <Setter Property="Padding" Value="10,2"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextMutedBrush}"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundSecondaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Border Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1,1,1,0"
                            Padding="{TemplateBinding Padding}"
                            Height="{TemplateBinding Height}"
                            Margin="-2,2,-2,0">
                        <ContentPresenter x:Name="ContentSite"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Center"
                                          ContentSource="Header"
                                          TextBlock.Foreground="{TemplateBinding Foreground}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Panel.ZIndex" Value="100"/>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource BackgroundPrimaryBrush}"/>
                            <Setter TargetName="Border" Property="Margin" Value="-2,0,-2,0"/>
                            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource BackgroundPrimaryBrush}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Style for ListBox items without standard highlighting -->
    <Style x:Key="CustomListBoxItemStyle" TargetType="ListBoxItem">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Content="{TemplateBinding Content}"
                                        ContentTemplate="{TemplateBinding ContentTemplate}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Styles for document info block -->
    <Style x:Key="DocumentInfoLabelStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Margin" Value="0,0,3,0"/>
    </Style>

    <Style x:Key="DocumentInfoValueStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="Margin" Value="5,0,0,0"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

    <Style x:Key="ModelStateValueStyle" TargetType="TextBlock" BasedOn="{StaticResource DocumentInfoValueStyle}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsPrimaryModelState}" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ErrorBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <!-- Universal style for tokens as blocks -->
    <Style x:Key="TokenBlockStyle" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource TokenBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="6,4"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
            </Trigger>
            <!-- Style for custom tokens -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Tag}" Value="CustomText">
                <Setter Property="Background" Value="{DynamicResource TokenCustomBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource TokenCustomBorderBrush}"/>
            </DataTrigger>
            <!-- Style for user-defined properties -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Tag}" Value="UserDefined">
                <Setter Property="Background" Value="{DynamicResource TokenUserDefinedBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource TokenUserDefinedBorderBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Style for text inside tokens -->
    <Style x:Key="TokenTextStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Style for tokens in ListBox (inherits from universal) -->
    <Style x:Key="TokenItemStyle" TargetType="ListBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="TokenBorder" Style="{StaticResource TokenBlockStyle}">
                        <TextBlock Text="{Binding DisplayName}" Style="{StaticResource TokenTextStyle}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="TokenBorder" Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style for ListBox with tokens -->
    <Style x:Key="TokenListBoxStyle" TargetType="ListBox">
        <Setter Property="Background" Value="{DynamicResource BackgroundPrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="{StaticResource StandardBorderThicknessValue}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource TokenItemStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{StaticResource UniformTinyPaddingThickness}">
                        <ScrollViewer Focusable="False"
                                      HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                      VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Base style for separators -->
    <Style x:Key="BaseSeparatorStyle" TargetType="Separator">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Separator">
                    <Rectangle Fill="{DynamicResource SeparatorBrush}" Opacity="0.25"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="{StaticResource SmallMarginThickness}"/>
    </Style>

    <!-- Style for vertical separator -->
    <Style x:Key="VerticalSeparatorStyle" TargetType="Separator" BasedOn="{StaticResource BaseSeparatorStyle}">
        <Setter Property="Width" Value="1"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
    </Style>

    <!-- Style for horizontal separator -->
    <Style x:Key="HorizontalSeparatorStyle" TargetType="Separator" BasedOn="{StaticResource BaseSeparatorStyle}">
        <Setter Property="Height" Value="1"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Style for file name preview -->
    <Style x:Key="FileNamePreviewBorderStyle" TargetType="Border">
        <Setter Property="MinHeight" Value="{StaticResource StandardElementHeight}"/>
        <Setter Property="Padding" Value="8,4"/>
        <Setter Property="BorderThickness" Value="{StaticResource StandardBorderThicknessValue}"/>
        <Setter Property="Background" Value="{DynamicResource PreviewWarningBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
        <Style.Triggers>
            <!-- Validation triggers (work only when function is enabled and template is not empty) -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding EnableFileNameConstructor}" Value="True"/>
                    <Condition Binding="{Binding TokenService.IsFileNameTemplateValid}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource PreviewValidBackgroundBrush}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource PreviewValidBorderBrush}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding EnableFileNameConstructor}" Value="True"/>
                    <Condition Binding="{Binding TokenService.IsFileNameTemplateValid}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource PreviewWarningBackgroundBrush}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource PreviewWarningBorderBrush}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <!-- Priority triggers: neutral appearance when function is disabled or template is empty (LAST - highest priority) -->
            <DataTrigger Binding="{Binding EnableFileNameConstructor}" Value="False">
                <Setter Property="Background" Value="{DynamicResource PreviewWarningBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TokenService.FileNameTemplate}" Value="">
                <Setter Property="Background" Value="{DynamicResource PreviewWarningBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Style for file name preview text -->
    <Style x:Key="FileNamePreviewTextStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="FontFamily" Value="Consolas"/>
        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
    </Style>

    <!-- Styles for file name constructor elements -->
    <Style x:Key="FileNameInputTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource BaseTextBoxStyle}">
        <Setter Property="Width" Value="200"/>
    </Style>

    <Style x:Key="PresetComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource BaseComboBoxStyle}"/>


    <!-- Simple style for TreeView -->
    <Style x:Key="ConflictTreeViewStyle" TargetType="TreeView">
        <Setter Property="Background" Value="{DynamicResource BackgroundPrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="{StaticResource StandardBorderThicknessValue}"/>
        <Setter Property="Padding" Value="{StaticResource StandardPaddingThickness}"/>
    </Style>

    <!-- Simple style for TreeViewItem -->
    <Style x:Key="ConflictTreeViewItemStyle" TargetType="TreeViewItem">
        <Setter Property="IsExpanded" Value="True"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Margin" Value="0,1"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource AccentBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource BackgroundPrimaryBrush}"/>
            </Trigger>
        </Style.Triggers>
        <Style.Resources>
            <!-- Style for TextBlock inside TreeViewItem -->
            <Style TargetType="TextBlock">
                <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem}, Path=IsSelected}" Value="True">
                        <Setter Property="Foreground" Value="{DynamicResource BackgroundPrimaryBrush}"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- Style for TextBlock of child elements (files) -->
            <Style TargetType="TextBlock" x:Key="FileTextBlockStyle" BasedOn="{StaticResource {x:Type TextBlock}}">
                <Setter Property="Foreground" Value="{DynamicResource TextMutedBrush}"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem}, Path=IsSelected}" Value="True">
                        <Setter Property="Foreground" Value="{DynamicResource BackgroundPrimaryBrush}"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>


    <!-- Style for StatusBar -->
    <Style x:Key="BaseStatusBarStyle" TargetType="StatusBar">
        <Setter Property="Background" Value="{DynamicResource BackgroundSecondaryBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
        <Setter Property="BorderThickness" Value="0,1,0,0"/>
        <Setter Property="Height" Value="{StaticResource LargeElementHeight}"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
    </Style>

    <!-- Style for StatusBarItem -->
    <Style x:Key="BaseStatusBarItemStyle" TargetType="StatusBarItem">
        <Setter Property="Padding" Value="10,2"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Bottom of dialogs: panel with buttons -->
    <Style x:Key="DialogBottomBarStyle" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource BackgroundTertiaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderSecondaryBrush}"/>
        <Setter Property="BorderThickness" Value="{StaticResource StandardTopOnlyBorderThicknessValue}"/>
        <Setter Property="Padding" Value="{StaticResource StandardPaddingThickness}"/>
    </Style>

    <!-- Style for Expander with square corners -->
    <Style x:Key="SquareExpanderStyle" TargetType="Expander" BasedOn="{StaticResource {x:Type Expander}}">
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="{StaticResource StandardBorderThicknessValue}"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundSecondaryBrush}"/>
        <!-- Removed Padding to avoid overlap with Margin of root tab containers -->
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="0">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite"
                                          DockPanel.Dock="Top"
                                          Height="{StaticResource LargeElementHeight}"
                                          IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                          Content="{TemplateBinding Header}">
                                <ToggleButton.Template>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <Border Background="{DynamicResource TransparentBrush}" Padding="{StaticResource UniformSmallPaddingThickness}">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="20"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <Path x:Name="Arrow"
                                                      Grid.Column="0"
                                                      Data="M0,0 L4,4 L8,0 Z"
                                                      Fill="{DynamicResource TextSecondaryBrush}"
                                                      VerticalAlignment="Center"
                                                      HorizontalAlignment="Center"
                                                      RenderTransformOrigin="0.5,0.5">
                                                    <Path.RenderTransform>
                                                        <RotateTransform Angle="0"/>
                                                    </Path.RenderTransform>
                                                </Path>
                                                <ContentPresenter Grid.Column="1"
                                                                  VerticalAlignment="Center"
                                                                  HorizontalAlignment="Left"/>
                                            </Grid>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsChecked" Value="True">
                                                <Setter TargetName="Arrow" Property="RenderTransform">
                                                    <Setter.Value>
                                                        <RotateTransform Angle="180"/>
                                                    </Setter.Value>
                                                </Setter>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </ToggleButton.Template>
                            </ToggleButton>

                            <ContentPresenter x:Name="ExpandSite"
                                              Visibility="Collapsed"
                                              DockPanel.Dock="Top"
                                              Margin="{TemplateBinding Padding}"/>
                        </DockPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
