<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:local="clr-namespace:FlatPatternExporter.UI.Windows"
                    xmlns:converters="clr-namespace:FlatPatternExporter.Converters"
                    xmlns:extensions="clr-namespace:FlatPatternExporter.Extensions">
    <converters:PropertyExpressionByNameConverter x:Key="PropertyExpressionByNameConverter" />
    <converters:DynamicPropertyValueConverter x:Key="DynamicPropertyValueConverter" />

    <!-- Base styles for cells -->


    <!-- Base style for all text cells -->
    <Style x:Key="BaseCellStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Padding" Value="{StaticResource StandardPaddingThickness}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
    </Style>

    <!-- Standard style for regular columns -->
    <Style x:Key="CenteredCellStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseCellStyle}"/>

    <!-- Data templates -->

    <!-- Universal template: text + expression indicator (fx). Property path is taken from cell Tag -->
    <DataTemplate x:Key="EditableWithFxTemplate">
        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <TextBlock VerticalAlignment="Center"
                       HorizontalAlignment="Center"
                       Style="{StaticResource CenteredCellStyle}"
                       TextTrimming="CharacterEllipsis"
                       Margin="{StaticResource RightSmallMarginThickness}">
                <TextBlock.Text>
                    <MultiBinding Converter="{StaticResource DynamicPropertyValueConverter}">
                        <Binding/>
                        <Binding RelativeSource="{RelativeSource AncestorType=DataGridCell}" Path="Tag"/>
                    </MultiBinding>
                </TextBlock.Text>
            </TextBlock>

            <TextBlock Text="fx"
                       VerticalAlignment="Center"
                       HorizontalAlignment="Right"
                       Margin="{StaticResource RightSmallMarginThickness}"
                       FontStyle="Italic"
                       FontSize="{StaticResource SmallFontSize}"
                       Foreground="{DynamicResource TextMutedBrush}"
                       ToolTip="{extensions:Localize ToolTip_ExpressionIndicator}">
                <TextBlock.Visibility>
                    <MultiBinding Converter="{StaticResource PropertyExpressionByNameConverter}">
                        <Binding/>
                        <Binding Path="ExpressionStateVersion"/>
                        <Binding RelativeSource="{RelativeSource AncestorType=DataGridCell}" Path="Tag"/>
                    </MultiBinding>
                </TextBlock.Visibility>
            </TextBlock>
        </Grid>
    </DataTemplate>
    
    <!-- Template for "Part Image" column -->
    <DataTemplate x:Key="PartImageTemplate">
        <Border Margin="{StaticResource VerticalHairlineMarginThickness}">
            <Border.OpacityMask>
                <VisualBrush>
                    <VisualBrush.Visual>
                        <Border Background="Black"
                                CornerRadius="{StaticResource StandardCornerRadiusValue}"
                                Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Border}}"
                                Height="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Border}}"/>
                    </VisualBrush.Visual>
                </VisualBrush>
            </Border.OpacityMask>
            <Image Source="{Binding Preview}"
                   HorizontalAlignment="Center"
                   VerticalAlignment="Center">
                <Image.ToolTip>
                    <ToolTip Style="{StaticResource BaseToolTipStyle}" Padding="0">
                        <Image Source="{Binding Preview}"
                               MaxWidth="200"
                               MaxHeight="200"
                               Stretch="Uniform"/>
                    </ToolTip>
                </Image.ToolTip>
            </Image>
        </Border>
    </DataTemplate>

    <!-- Base style for TextBlock "No Thumbnail" -->
    <Style x:Key="NoThumbnailTextStyle" TargetType="TextBlock">
        <Setter Property="Text" Value="{extensions:Localize Text_NoThumbnail}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="{StaticResource SmallFontSize}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextDisabledBrush}"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="Visibility" Value="Collapsed"/>
    </Style>

    <!-- Centralized template for DXF images -->
    <ControlTemplate x:Key="DxfImageContainerTemplate" TargetType="ContentControl">
        <Grid Margin="{StaticResource VerticalHairlineMarginThickness}">
            <Border>
                <Border.OpacityMask>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <Border Background="Black"
                                    CornerRadius="{StaticResource StandardCornerRadiusValue}"
                                    Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Border}}"
                                    Height="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Border}}"/>
                        </VisualBrush.Visual>
                    </VisualBrush>
                </Border.OpacityMask>
                <Image HorizontalAlignment="Center"
                       VerticalAlignment="Center"
                       Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag}">
                    <Image.ToolTip>
                        <ToolTip Style="{StaticResource BaseToolTipStyle}" Padding="0">
                            <Image Source="{Binding PlacementTarget.Source, RelativeSource={RelativeSource AncestorType=ToolTip}}"
                                   MaxWidth="200"
                                   MaxHeight="200"
                                   Stretch="Uniform"/>
                        </ToolTip>
                    </Image.ToolTip>
                </Image>
            </Border>
            <TextBlock>
                <TextBlock.Style>
                    <Style TargetType="TextBlock" BasedOn="{StaticResource NoThumbnailTextStyle}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag}" Value="{x:Null}">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
        </Grid>
    </ControlTemplate>

    <!-- Template for "Flat Pattern Image" column -->
    <DataTemplate x:Key="DxfImageTemplate">
        <ContentControl Template="{StaticResource DxfImageContainerTemplate}" 
                        Tag="{Binding DxfPreview}"/>
    </DataTemplate>


    <!-- Template for ID column with flat pattern indicator -->
    <DataTemplate x:Key="IDWithFlatPatternIndicatorTemplate">
        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="7"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Rectangle Grid.Column="0" 
                       Width="3" 
                       HorizontalAlignment="Left" 
                       VerticalAlignment="Stretch" 
                       Margin="{StaticResource LeftTinyMarginThickness}">
                <Rectangle.Style>
                    <Style TargetType="Rectangle">
                        <Setter Property="Fill" Value="{DynamicResource ErrorBrush}"/>
                        <Setter Property="ToolTip" Value="{extensions:Localize ToolTip_FlatPatternMissing}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding HasFlatPattern}" Value="True">
                                <Setter Property="Fill" Value="{DynamicResource SuccessBrush}"/>
                                <Setter Property="ToolTip" Value="{extensions:Localize ToolTip_FlatPatternAvailable}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Rectangle.Style>
            </Rectangle>
            <TextBlock Grid.Column="1" 
                       Text="{Binding Item}" 
                       VerticalAlignment="Center" 
                       HorizontalAlignment="Center" 
                       Style="{StaticResource CenteredCellStyle}" 
                       TextTrimming="CharacterEllipsis"/>
        </Grid>
    </DataTemplate>




    <!-- Template for "Quantity" column with color indication and editing capability -->
    <DataTemplate x:Key="EditableQuantityTemplate">
        <Grid>
            <!-- Display in read mode -->
            <TextBlock Text="{Binding Quantity}" x:Name="DisplayTextBlock">
                <TextBlock.Style>
                    <Style TargetType="TextBlock" BasedOn="{StaticResource CenteredCellStyle}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsOverridden}" Value="True">
                                <Setter Property="Foreground" Value="{DynamicResource ErrorBrush}"/>
                            </DataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsOverridden}" Value="False"/>
                                    <Condition Binding="{Binding IsMultiplied}" Value="True"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Foreground" Value="{DynamicResource AccentBrush}"/>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
            
            <!-- Editing in edit mode -->
            <TextBox Text="{Binding Quantity, UpdateSourceTrigger=PropertyChanged}"
                     HorizontalContentAlignment="Center"
                     x:Name="EditTextBox"
                     Visibility="Collapsed"/>
        </Grid>
        
        <DataTemplate.Triggers>
            <!-- Switching between display and edit modes -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=DataGridCell}, Path=IsEditing}" Value="True">
                <Setter TargetName="DisplayTextBlock" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="EditTextBox" Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- Template for processing status column -->
    <DataTemplate x:Key="ProcessingStatusTemplate">
        <Border Width="10" Height="10"
                BorderBrush="{DynamicResource TextDisabledBrush}"
                BorderThickness="{StaticResource StandardBorderThicknessValue}"
                CornerRadius="{StaticResource SmallCornerRadiusValue}"
                HorizontalAlignment="Center"
                VerticalAlignment="Center">
            <Border.Style>
                <Style TargetType="Border">
                    <Setter Property="Background" Value="Transparent"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding ProcessingStatus}" Value="Success">
                            <Setter Property="Background" Value="{DynamicResource ProcessingStatusSuccessBrush}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ProcessingStatus}" Value="Error">
                            <Setter Property="Background" Value="{DynamicResource ProcessingStatusErrorBrush}"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Border.Style>
        </Border>
    </DataTemplate>

    <!-- DataGrid styles -->
    <Style x:Key="DataGridRowStyle" TargetType="DataGridRow">
        <Setter Property="Background" Value="{DynamicResource EvenRowBrush}" />
        <Style.Triggers>
            <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                <Setter Property="Background" Value="{DynamicResource OddRowBrush}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource HighlightBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource HighlightTextBrush}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True"/>
                    <Condition Property="Selector.IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource HighlightBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource HighlightTextBrush}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- Style for column headers -->
    <Style x:Key="DataGridColumnHeaderStyle" TargetType="DataGridColumnHeader">
        <Setter Property="Background" Value="{DynamicResource SelectionBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="Height" Value="{StaticResource LargeElementHeight}"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Padding" Value="{StaticResource StandardPaddingThickness}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
        <Setter Property="BorderThickness" Value="0,0,1,1"/>
        <Setter Property="ContextMenu" Value="{x:Null}"/>
    </Style>

    <!-- Style for row headers -->
    <Style x:Key="DataGridRowHeaderStyle" TargetType="DataGridRowHeader">
        <Setter Property="Background" Value="{DynamicResource SelectionBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
        <Setter Property="BorderThickness" Value="0,0,1,1"/>
        <Setter Property="Width" Value="15"/>
        <Setter Property="ContextMenu" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridRowHeader">
                    <Grid>
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style for cells -->
    <Style x:Key="DataGridCellStyle" TargetType="DataGridCell">
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Padding" Value="{StaticResource StandardPaddingThickness}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource GridLinesBrush}"/>
        <Setter Property="BorderThickness" Value="0,0,1,1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource HighlightTextBrush}"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Base style for TextBlock inside DataGrid -->
    <Style x:Key="DataGridTextBlockStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseCellStyle}">
        <Setter Property="Padding" Value="{StaticResource SmallPaddingThickness}"/>
    </Style>

    <!-- Style for phantom column header during drag -->
    <Style x:Key="PhantomColumnHeaderStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{StaticResource LargeFontSize}"/>
        <Setter Property="Padding" Value="{StaticResource SmallPaddingThickness}"/>
        <Setter Property="Opacity" Value="0.7"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="Background" Value="{DynamicResource StatusBarBackgroundBrush}"/>
        <Setter Property="FontWeight" Value="Normal"/>
    </Style>

    <!-- Style for phantom column header in delete mode -->
    <Style x:Key="PhantomColumnHeaderDeleteStyle" TargetType="TextBlock" BasedOn="{StaticResource PhantomColumnHeaderStyle}">
        <Setter Property="Background" Value="{DynamicResource ErrorBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource BackgroundPrimaryBrush}"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>
    
    <!-- Style for table icon -->
    <Style x:Key="TableIconStyle" TargetType="Path">
        <Setter Property="Data" Value="{StaticResource TableIconGeometry}"/>
        <Setter Property="Stroke" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="StrokeThickness" Value="1.5"/>
        <Setter Property="Stretch" Value="Uniform"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Style for empty area to the right of headers -->
    <Style TargetType="DataGridColumnHeadersPresenter">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridColumnHeadersPresenter">
                    <Grid>
                        <DataGridColumnHeader x:Name="PART_FillerColumnHeader" 
                                              IsHitTestVisible="False" 
                                              BorderThickness="0,0,0,1"
                                              BorderBrush="{DynamicResource BorderLightBrush}"
                                              Background="{DynamicResource SelectionBackgroundBrush}"/>
                        <ItemsPresenter/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>

