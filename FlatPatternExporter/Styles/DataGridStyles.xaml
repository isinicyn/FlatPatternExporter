<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:local="clr-namespace:FlatPatternExporter">


    <!-- Базовые стили для ячеек -->
    
    <!-- Базовый стиль для индикатора выражения fx -->
    <Style x:Key="BaseExpressionIndicatorStyle" TargetType="TextBlock">
        <Setter Property="Text" Value="fx"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="Margin" Value="{StaticResource RightSmallMarginThickness}"/>
        <Setter Property="FontStyle" Value="Italic"/>
        <Setter Property="FontSize" Value="{StaticResource SmallFontSize}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextMutedBrush}"/>
        <Setter Property="ToolTip" Value="Значение задано выражением (Expression)"/>
        <Setter Property="Visibility" Value="Collapsed"/>
    </Style>

    <!-- Универсальный стиль индикатора выражения fx.
         Привяжите булев флаг к Tag у TextBlock. -->
    <Style x:Key="FxIndicatorByTagStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseExpressionIndicatorStyle}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <!-- Базовый стиль для всех текстовых ячеек -->
    <Style x:Key="BaseCellStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Padding" Value="{StaticResource StandardPaddingThickness}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
    </Style>

    <!-- Стандартный стиль для обычных колонок -->
    <Style x:Key="CenteredCellStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseCellStyle}"/>

    <!-- Шаблоны данных -->
    
    <!-- Шаблон для колонки "Изобр. детали" -->
    <DataTemplate x:Key="PartImageTemplate">
        <Image Source="{Binding Preview}" 
               Margin="{StaticResource VerticalHairlineMarginThickness}" 
               HorizontalAlignment="Center" 
               VerticalAlignment="Center"/>
    </DataTemplate>

    <!-- Шаблон для колонки "Изобр. развертки" -->
    <DataTemplate x:Key="DxfImageTemplate">
        <Grid Margin="{StaticResource VerticalHairlineMarginThickness}">
            <Image Source="{Binding DxfPreview}" 
                   HorizontalAlignment="Center" 
                   VerticalAlignment="Center"/>
            <TextBlock Text="Нет миниатюры" 
                       HorizontalAlignment="Center" 
                       VerticalAlignment="Center" 
                       FontSize="{StaticResource SmallFontSize}" 
                       Foreground="{DynamicResource TextDisabledBrush}"
                       TextWrapping="Wrap"
                       TextAlignment="Center">
                <TextBlock.Style>
                    <Style TargetType="TextBlock">
                        <Setter Property="Visibility" Value="Collapsed"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding DxfPreview}" Value="{x:Null}">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
        </Grid>
    </DataTemplate>

    <!-- Шаблон для колонки ID с индикатором развертки -->
    <DataTemplate x:Key="IDWithFlatPatternIndicatorTemplate">
        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="7"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Rectangle Grid.Column="0" 
                       Width="3" 
                       HorizontalAlignment="Left" 
                       VerticalAlignment="Stretch" 
                       Margin="{StaticResource LeftTinyMarginThickness}">
                <Rectangle.Style>
                    <Style TargetType="Rectangle">
                        <Setter Property="Fill" Value="{DynamicResource ErrorBrush}"/>
                        <Setter Property="ToolTip" Value="Развертка отсутствует"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding HasFlatPattern}" Value="True">
                                <Setter Property="Fill" Value="{DynamicResource SuccessBrush}"/>
                                <Setter Property="ToolTip" Value="Развертка доступна"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Rectangle.Style>
            </Rectangle>
            <TextBlock Grid.Column="1" 
                       Text="{Binding Item}" 
                       VerticalAlignment="Center" 
                       HorizontalAlignment="Center" 
                       Style="{StaticResource CenteredCellStyle}" 
                       TextTrimming="CharacterEllipsis"/>
        </Grid>
    </DataTemplate>

    <!-- Шаблон для колонки "Обозначение" с индикатором выражения -->
    <DataTemplate x:Key="PartNumberWithExpressionTemplate">
        <local:TextWithFxIndicator Text="{Binding PartNumber}" IsExpression="{Binding PartNumberIsExpression}"/>
    </DataTemplate>

    <!-- Универсальные шаблоны для редактируемых свойств с индикаторами выражений -->
    <DataTemplate x:Key="DescriptionWithExpressionTemplate">
        <local:TextWithFxIndicator Text="{Binding Description}" IsExpression="{Binding DescriptionIsExpression}"/>
    </DataTemplate>

    <DataTemplate x:Key="AuthorWithExpressionTemplate">
        <local:TextWithFxIndicator Text="{Binding Author}" IsExpression="{Binding AuthorIsExpression}"/>
    </DataTemplate>

    <DataTemplate x:Key="RevisionWithExpressionTemplate">
        <local:TextWithFxIndicator Text="{Binding Revision}" IsExpression="{Binding RevisionIsExpression}"/>
    </DataTemplate>

    <DataTemplate x:Key="TitleWithExpressionTemplate">
        <local:TextWithFxIndicator Text="{Binding Title}" IsExpression="{Binding TitleIsExpression}"/>
    </DataTemplate>

    <DataTemplate x:Key="SubjectWithExpressionTemplate">
        <local:TextWithFxIndicator Text="{Binding Subject}" IsExpression="{Binding SubjectIsExpression}"/>
    </DataTemplate>

    <DataTemplate x:Key="KeywordsWithExpressionTemplate">
        <local:TextWithFxIndicator Text="{Binding Keywords}" IsExpression="{Binding KeywordsIsExpression}"/>
    </DataTemplate>

    <DataTemplate x:Key="CommentsWithExpressionTemplate">
        <local:TextWithFxIndicator Text="{Binding Comments}" IsExpression="{Binding CommentsIsExpression}"/>
    </DataTemplate>

    <DataTemplate x:Key="CategoryWithExpressionTemplate">
        <local:TextWithFxIndicator Text="{Binding Category}" IsExpression="{Binding CategoryIsExpression}"/>
    </DataTemplate>

    <DataTemplate x:Key="ManagerWithExpressionTemplate">
        <local:TextWithFxIndicator Text="{Binding Manager}" IsExpression="{Binding ManagerIsExpression}"/>
    </DataTemplate>

    <DataTemplate x:Key="CompanyWithExpressionTemplate">
        <local:TextWithFxIndicator Text="{Binding Company}" IsExpression="{Binding CompanyIsExpression}"/>
    </DataTemplate>

    <DataTemplate x:Key="ProjectWithExpressionTemplate">
        <local:TextWithFxIndicator Text="{Binding Project}" IsExpression="{Binding ProjectIsExpression}"/>
    </DataTemplate>

    <DataTemplate x:Key="StockNumberWithExpressionTemplate">
        <local:TextWithFxIndicator Text="{Binding StockNumber}" IsExpression="{Binding StockNumberIsExpression}"/>
    </DataTemplate>

    <DataTemplate x:Key="CostCenterWithExpressionTemplate">
        <local:TextWithFxIndicator Text="{Binding CostCenter}" IsExpression="{Binding CostCenterIsExpression}"/>
    </DataTemplate>

    <DataTemplate x:Key="CheckedByWithExpressionTemplate">
        <local:TextWithFxIndicator Text="{Binding CheckedBy}" IsExpression="{Binding CheckedByIsExpression}"/>
    </DataTemplate>

    <DataTemplate x:Key="EngApprovedByWithExpressionTemplate">
        <local:TextWithFxIndicator Text="{Binding EngApprovedBy}" IsExpression="{Binding EngApprovedByIsExpression}"/>
    </DataTemplate>

    <DataTemplate x:Key="UserStatusWithExpressionTemplate">
        <local:TextWithFxIndicator Text="{Binding UserStatus}" IsExpression="{Binding UserStatusIsExpression}"/>
    </DataTemplate>

    <DataTemplate x:Key="CatalogWebLinkWithExpressionTemplate">
        <local:TextWithFxIndicator Text="{Binding CatalogWebLink}" IsExpression="{Binding CatalogWebLinkIsExpression}"/>
    </DataTemplate>

    <DataTemplate x:Key="VendorWithExpressionTemplate">
        <local:TextWithFxIndicator Text="{Binding Vendor}" IsExpression="{Binding VendorIsExpression}"/>
    </DataTemplate>

    <DataTemplate x:Key="MfgApprovedByWithExpressionTemplate">
        <local:TextWithFxIndicator Text="{Binding MfgApprovedBy}" IsExpression="{Binding MfgApprovedByIsExpression}"/>
    </DataTemplate>

    <DataTemplate x:Key="DesignStatusWithExpressionTemplate">
        <local:TextWithFxIndicator Text="{Binding DesignStatus}" IsExpression="{Binding DesignStatusIsExpression}"/>
    </DataTemplate>

    <DataTemplate x:Key="DesignerWithExpressionTemplate">
        <local:TextWithFxIndicator Text="{Binding Designer}" IsExpression="{Binding DesignerIsExpression}"/>
    </DataTemplate>

    <DataTemplate x:Key="EngineerWithExpressionTemplate">
        <local:TextWithFxIndicator Text="{Binding Engineer}" IsExpression="{Binding EngineerIsExpression}"/>
    </DataTemplate>

    <DataTemplate x:Key="AuthorityWithExpressionTemplate">
        <local:TextWithFxIndicator Text="{Binding Authority}" IsExpression="{Binding AuthorityIsExpression}"/>
    </DataTemplate>

    <!-- Шаблон для колонки "Количество" с цветовой индикацией и возможностью редактирования -->
    <DataTemplate x:Key="EditableQuantityTemplate">
        <Grid>
            <!-- Отображение в режиме чтения -->
            <TextBlock Text="{Binding Quantity}" x:Name="DisplayTextBlock">
                <TextBlock.Style>
                    <Style TargetType="TextBlock" BasedOn="{StaticResource CenteredCellStyle}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsOverridden}" Value="True">
                                <Setter Property="Foreground" Value="{DynamicResource QuantityOverriddenBrush}"/>
                            </DataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsOverridden}" Value="False"/>
                                    <Condition Binding="{Binding IsMultiplied}" Value="True"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Foreground" Value="{DynamicResource QuantityMultipliedBrush}"/>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
            
            <!-- Редактирование в режиме редактирования -->
            <TextBox Text="{Binding Quantity, UpdateSourceTrigger=PropertyChanged}"
                     HorizontalContentAlignment="Center"
                     x:Name="EditTextBox"
                     Visibility="Collapsed"/>
        </Grid>
        
        <DataTemplate.Triggers>
            <!-- Переключение между режимами отображения и редактирования -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=DataGridCell}, Path=IsEditing}" Value="True">
                <Setter TargetName="DisplayTextBlock" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="EditTextBox" Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- Шаблон для колонки статуса обработки -->
    <DataTemplate x:Key="ProcessingStatusTemplate">
        <Border Width="10" Height="10" 
                BorderBrush="{DynamicResource TextDisabledBrush}" 
                BorderThickness="{StaticResource StandardBorderThicknessValue}" 
                HorizontalAlignment="Center" 
                VerticalAlignment="Center">
            <Border.Style>
                <Style TargetType="Border">
                    <Setter Property="Background" Value="Transparent"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding ProcessingStatus}" Value="Success">
                            <Setter Property="Background" Value="{DynamicResource ProcessingStatusSuccessBrush}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ProcessingStatus}" Value="Error">
                            <Setter Property="Background" Value="{DynamicResource ProcessingStatusErrorBrush}"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Border.Style>
        </Border>
    </DataTemplate>

    <!-- Стили DataGrid -->
    <Style x:Key="DataGridRowStyle" TargetType="DataGridRow">
        <Setter Property="Background" Value="{StaticResource EvenRowBrush}" />
        <Style.Triggers>
            <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                <Setter Property="Background" Value="{StaticResource OddRowBrush}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{StaticResource HighlightBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource HighlightTextBrush}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True"/>
                    <Condition Property="Selector.IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource HighlightBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource HighlightTextBrush}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- Стиль для заголовков столбцов -->
    <Style x:Key="DataGridColumnHeaderStyle" TargetType="DataGridColumnHeader">
        <Setter Property="Background" Value="{DynamicResource SelectionBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="Height" Value="{StaticResource LargeElementHeight}"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Padding" Value="{StaticResource StandardPaddingThickness}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="{StaticResource BorderLightBrush}"/>
        <Setter Property="BorderThickness" Value="0,0,1,1"/>
        <Setter Property="ContextMenu" Value="{x:Null}"/>
    </Style>

    <!-- Стиль для заголовков строк -->
    <Style x:Key="DataGridRowHeaderStyle" TargetType="DataGridRowHeader">
        <Setter Property="Background" Value="{DynamicResource SelectionBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BorderLightBrush}"/>
        <Setter Property="BorderThickness" Value="0,0,1,1"/>
        <Setter Property="Width" Value="15"/>
        <Setter Property="ContextMenu" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridRowHeader">
                    <Grid>
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Стиль для ячеек -->
    <Style x:Key="DataGridCellStyle" TargetType="DataGridCell">
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Padding" Value="{StaticResource StandardPaddingThickness}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource GridLinesBrush}"/>
        <Setter Property="BorderThickness" Value="0,0,1,1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{StaticResource HighlightTextBrush}"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Базовый стиль для TextBlock внутри DataGrid -->
    <Style x:Key="DataGridTextBlockStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Padding" Value="{StaticResource SmallPaddingThickness}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
    </Style>

    <!-- Стиль для фантомного заголовка колонки при перетаскивании -->
    <Style x:Key="PhantomColumnHeaderStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{StaticResource LargeFontSize}"/>
        <Setter Property="Padding" Value="{StaticResource SmallPaddingThickness}"/>
        <Setter Property="Opacity" Value="0.7"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="Background" Value="{DynamicResource StatusBarBackgroundBrush}"/>
        <Setter Property="FontWeight" Value="Normal"/>
    </Style>

    <!-- Стиль для фантомного заголовка в режиме удаления -->
    <Style x:Key="PhantomColumnHeaderDeleteStyle" TargetType="TextBlock" BasedOn="{StaticResource PhantomColumnHeaderStyle}">
        <Setter Property="Background" Value="{DynamicResource ErrorBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource BackgroundPrimaryBrush}"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>
    
    <!-- Стиль для иконки таблицы -->
    <Style x:Key="TableIconStyle" TargetType="Path">
        <Setter Property="Data" Value="{StaticResource TableIconGeometry}"/>
        <Setter Property="Stroke" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="StrokeThickness" Value="1.5"/>
        <Setter Property="Stretch" Value="Uniform"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Стиль для пустой области справа от заголовков -->
    <Style TargetType="DataGridColumnHeadersPresenter">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridColumnHeadersPresenter">
                    <Grid>
                        <DataGridColumnHeader x:Name="PART_FillerColumnHeader" 
                                              IsHitTestVisible="False" 
                                              BorderThickness="0,0,0,1"
                                              BorderBrush="{StaticResource BorderLightBrush}"
                                              Background="{DynamicResource SelectionBackgroundBrush}"/>
                        <ItemsPresenter/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
