<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- Specialized control styles for application-specific components -->

    <!-- Style for ListBox items without standard highlighting -->
    <Style x:Key="CustomListBoxItemStyle" TargetType="ListBoxItem">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="{StaticResource SmallCornerRadiusValue}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Content="{TemplateBinding Content}"
                                        ContentTemplate="{TemplateBinding ContentTemplate}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Universal style for tokens as blocks -->
    <Style x:Key="TokenBlockStyle" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource TokenBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="{StaticResource SmallCornerRadiusValue}"/>
        <Setter Property="Padding" Value="6,4"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Tag}" Value="CustomText">
                <Setter Property="Background" Value="{DynamicResource TokenCustomBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource TokenCustomBorderBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Tag}" Value="UserDefined">
                <Setter Property="Background" Value="{DynamicResource TokenUserDefinedBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource TokenUserDefinedBorderBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Style for text inside tokens -->
    <Style x:Key="TokenTextStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Style for tokens in ListBox -->
    <Style x:Key="TokenItemStyle" TargetType="ListBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="TokenBorder" Style="{StaticResource TokenBlockStyle}">
                        <TextBlock Text="{Binding DisplayName}" Style="{StaticResource TokenTextStyle}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="TokenBorder" Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style for ListBox with tokens -->
    <Style x:Key="TokenListBoxStyle" TargetType="ListBox">
        <Setter Property="Background" Value="{DynamicResource BackgroundPrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="{StaticResource StandardBorderThicknessValue}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource TokenItemStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{StaticResource StandardCornerRadiusValue}"
                            Padding="{StaticResource UniformTinyPaddingThickness}">
                        <ScrollViewer Focusable="False"
                                      CanContentScroll="False"
                                      HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                      VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Base style for separators -->
    <Style x:Key="BaseSeparatorStyle" TargetType="Separator">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Separator">
                    <Rectangle Fill="{DynamicResource SeparatorBrush}" Opacity="0.25"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="{StaticResource SmallMarginThickness}"/>
    </Style>

    <!-- Style for vertical separator -->
    <Style x:Key="VerticalSeparatorStyle" TargetType="Separator" BasedOn="{StaticResource BaseSeparatorStyle}">
        <Setter Property="Width" Value="1"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
    </Style>

    <!-- Style for horizontal separator -->
    <Style x:Key="HorizontalSeparatorStyle" TargetType="Separator" BasedOn="{StaticResource BaseSeparatorStyle}">
        <Setter Property="Height" Value="1"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Style for file name preview -->
    <Style x:Key="FileNamePreviewBorderStyle" TargetType="Border">
        <Setter Property="MinHeight" Value="{StaticResource StandardElementHeight}"/>
        <Setter Property="Padding" Value="8"/>
        <Setter Property="BorderThickness" Value="{StaticResource StandardBorderThicknessValue}"/>
        <Setter Property="CornerRadius" Value="{StaticResource StandardCornerRadiusValue}"/>
        <Setter Property="Background" Value="{DynamicResource PreviewWarningBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding EnableFileNameConstructor}" Value="True"/>
                    <Condition Binding="{Binding TokenService.IsFileNameTemplateValid}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource PreviewValidBackgroundBrush}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource PreviewValidBorderBrush}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding EnableFileNameConstructor}" Value="True"/>
                    <Condition Binding="{Binding TokenService.IsFileNameTemplateValid}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource PreviewWarningBackgroundBrush}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource PreviewWarningBorderBrush}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding EnableFileNameConstructor}" Value="False">
                <Setter Property="Background" Value="{DynamicResource PreviewWarningBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding TokenService.FileNameTemplate}" Value="">
                <Setter Property="Background" Value="{DynamicResource PreviewWarningBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Style for file name preview text -->
    <Style x:Key="FileNamePreviewTextStyle" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="FontFamily" Value="Consolas"/>
        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Styles for file name constructor elements -->
    <Style x:Key="FileNameInputTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource BaseTextBoxStyle}">
        <Setter Property="Width" Value="200"/>
    </Style>

    <Style x:Key="PresetComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource BaseComboBoxStyle}"/>

    <!-- Simple style for TreeView -->
    <Style x:Key="ConflictTreeViewStyle" TargetType="TreeView">
        <Setter Property="Background" Value="{DynamicResource BackgroundPrimaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="{StaticResource StandardBorderThicknessValue}"/>
        <Setter Property="Padding" Value="{StaticResource StandardPaddingThickness}"/>
    </Style>

    <!-- Simple style for TreeViewItem -->
    <Style x:Key="ConflictTreeViewItemStyle" TargetType="TreeViewItem">
        <Setter Property="IsExpanded" Value="True"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
        <Setter Property="Margin" Value="0,1"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource AccentBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource BackgroundPrimaryBrush}"/>
            </Trigger>
        </Style.Triggers>
        <Style.Resources>
            <Style TargetType="TextBlock">
                <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem}, Path=IsSelected}" Value="True">
                        <Setter Property="Foreground" Value="{DynamicResource BackgroundPrimaryBrush}"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="TextBlock" x:Key="FileTextBlockStyle" BasedOn="{StaticResource {x:Type TextBlock}}">
                <Setter Property="Foreground" Value="{DynamicResource TextMutedBrush}"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem}, Path=IsSelected}" Value="True">
                        <Setter Property="Foreground" Value="{DynamicResource BackgroundPrimaryBrush}"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>

    <!-- Style for StatusBar -->
    <Style x:Key="BaseStatusBarStyle" TargetType="StatusBar">
        <Setter Property="Background" Value="{DynamicResource BackgroundSecondaryBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderLightBrush}"/>
        <Setter Property="BorderThickness" Value="0,1,0,0"/>
        <Setter Property="Height" Value="{StaticResource LargeElementHeight}"/>
        <Setter Property="FontSize" Value="{StaticResource StandardFontSize}"/>
    </Style>

    <!-- Style for StatusBarItem -->
    <Style x:Key="BaseStatusBarItemStyle" TargetType="StatusBarItem">
        <Setter Property="Padding" Value="10,2"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Bottom of dialogs: panel with buttons -->
    <Style x:Key="DialogBottomBarStyle" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource BackgroundTertiaryBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderSecondaryBrush}"/>
        <Setter Property="BorderThickness" Value="{StaticResource StandardTopOnlyBorderThicknessValue}"/>
        <Setter Property="CornerRadius" Value="{StaticResource StandardCornerRadiusValue}"/>
        <Setter Property="Padding" Value="{StaticResource StandardPaddingThickness}"/>
    </Style>

    <!-- Style for Expander with square corners -->
    <Style x:Key="SquareExpanderStyle" TargetType="Expander" BasedOn="{StaticResource {x:Type Expander}}">
        <Setter Property="BorderBrush" Value="{DynamicResource BorderPrimaryBrush}"/>
        <Setter Property="BorderThickness" Value="{StaticResource StandardBorderThicknessValue}"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundSecondaryBrush}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{StaticResource StandardCornerRadiusValue}">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite"
                                          DockPanel.Dock="Top"
                                          Height="{StaticResource LargeElementHeight}"
                                          IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                          Content="{TemplateBinding Header}">
                                <ToggleButton.Template>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <Border Background="{DynamicResource TransparentBrush}" Padding="{StaticResource UniformSmallPaddingThickness}">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="20"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <Path x:Name="Arrow"
                                                      Grid.Column="0"
                                                      Data="M0,0 L4,4 L8,0 Z"
                                                      Fill="{DynamicResource TextSecondaryBrush}"
                                                      VerticalAlignment="Center"
                                                      HorizontalAlignment="Center"
                                                      RenderTransformOrigin="0.5,0.5">
                                                    <Path.RenderTransform>
                                                        <RotateTransform Angle="0"/>
                                                    </Path.RenderTransform>
                                                </Path>
                                                <ContentPresenter Grid.Column="1"
                                                                  VerticalAlignment="Center"
                                                                  HorizontalAlignment="Left"/>
                                            </Grid>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsChecked" Value="True">
                                                <Setter TargetName="Arrow" Property="RenderTransform">
                                                    <Setter.Value>
                                                        <RotateTransform Angle="180"/>
                                                    </Setter.Value>
                                                </Setter>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </ToggleButton.Template>
                            </ToggleButton>

                            <ContentPresenter x:Name="ExpandSite"
                                              Visibility="Collapsed"
                                              DockPanel.Dock="Top"
                                              Margin="{TemplateBinding Padding}"/>
                        </DockPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
